<?php
namespace Mouf\Packanalyst;

use Composer\Package\PackageInterface;
use Composer\EventDispatcher\EventDispatcher;
use Composer\IO\IOInterface;
use Composer\Composer;
use Composer\Util\Filesystem;
use Composer\Autoload\ClassMapGenerator;
/**
 * This package is in charge of detecting classes/interfaces/traits inside a package.
 * 
 * 
 * 
 * @author David NÃ©grier <david@mouf-php.com>
 */
class ClassesDetector
{
	private $composer;
	private $io;
	
	public function __construct(Composer $composer, IOInterface $io) {
		$this->composer = $composer;
		$this->io = $io;
	}
	
	/**
	 * Returns the classmap array.
	 * 
	 * Note: this code is borrowed from Mouf that itself inherits it from Composer.
	 * This code is doing interfaces detection on top of classes detection.
	 *  
	 * This map associates the name of the classes/interfaces/traits and the PHP file they are declared in.
	 *
	 * @return array<string, string>
	 */
	public function getClassMap(PackageInterface $package, $basePath) {
		$dispatcher = new EventDispatcher($this->composer, $this->io);
		
		$filesystem = new Filesystem();
		/*$filesystem->ensureDirectoryExists($config->get('vendor-dir'));
		$basePath = $filesystem->normalizePath(realpath(getcwd()));
		$vendorPath = $filesystem->normalizePath(realpath($config->get('vendor-dir')));
		$useGlobalIncludePath = (bool) $config->get('use-include-path');
		$prependAutoloader = $config->get('prepend-autoloader') === false ? 'false' : 'true';
		$targetDir = $vendorPath.'/'.$targetDir;
		$filesystem->ensureDirectoryExists($targetDir);
		
		$vendorPathCode = $filesystem->findShortestPathCode(realpath($targetDir), $vendorPath, true);
		$vendorPathCode52 = str_replace('__DIR__', 'dirname(__FILE__)', $vendorPathCode);
		$vendorPathToTargetDirCode = $filesystem->findShortestPathCode($vendorPath, realpath($targetDir), true);
		
		$appBaseDirCode = $filesystem->findShortestPathCode($vendorPath, $basePath, true);
		$appBaseDirCode = str_replace('__DIR__', '$vendorDir', $appBaseDirCode);
		*/
		
		// Collect information from all packages.
		
		$dispatcher = new EventDispatcher($this->composer, $this->io);
		$autoloadGenerator = new \Composer\Autoload\AutoloadGenerator($dispatcher);
		
		
		$autoloads = $autoloadGenerator->parseAutoloads(array(array($package, '.'/*$basePath*/)), $package);
		
		// flatten array
		$classMap = array();
		// Scan the PSR-0/4 directories for class files, and add them to the class map
		foreach (array('psr-0', 'psr-4') as $psrType) {
			foreach ($autoloads[$psrType] as $namespace => $paths) {
				foreach ($paths as $dir) {
					$dir = $filesystem->normalizePath($filesystem->isAbsolutePath($dir) ? $dir : $basePath.'/'.$dir);
					if (!is_dir($dir)) {
						continue;
					}
					$whitelist = sprintf(
							'{%s/%s.+(?<!(?<!/)Test\.php)$}',
							preg_quote($dir),
							($psrType === 'psr-0' && strpos($namespace, '_') === false) ? preg_quote(strtr($namespace, '\\', '/')) : ''
					);
	
					$namespaceFilter = $namespace === '' ? null : $namespace;
					foreach (ClassMapGenerator::createMap($dir, $whitelist, $this->io, $namespaceFilter) as $class => $path) {
						if (!isset($classMap[$class])) {
							//$path = $this->getPathCode($filesystem, $basePath, $vendorPath, $path);
							$classMap[$class] = $path;
						}
					}
				}
			}
		}
		
		foreach ($autoloads['classmap'] as $dir) {
			foreach (ClassMapGenerator::createMap($basePath.'/'.$dir, null, $this->io) as $class => $path) {
				//$path = $this->getPathCode($filesystem, $basePath, $vendorPath, $path);
				$classMap[$class] = $path;
			}
		}
		
		ksort($classMap);
		
		return $classMap;
	}
	
}
